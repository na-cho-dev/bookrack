import { Response } from 'express';
import { CreateUserDto } from 'src/user/dto/creat-user.dto';
import { UserService } from 'src/user/user.service';
import { UserResponse } from '../user/interface/user.interface';
import { EnvConfig } from 'src/common/config/env.config';
import { JWTCookieUtil } from 'src/common/utils/jwt-cookie.utils';
import { CreateAdminDto } from 'src/user/dto/create-admin.dto';
import { MembershipService } from 'src/membership/membership.service';
import { OrganizationService } from 'src/organization/organization.service';
export declare class AuthService {
    private readonly envConfig;
    private readonly userService;
    private readonly membershipService;
    private readonly jwtCookieService;
    private readonly organizationService;
    constructor(envConfig: EnvConfig, userService: UserService, membershipService: MembershipService, jwtCookieService: JWTCookieUtil, organizationService: OrganizationService);
    validateUser(email: string, password: string): Promise<{
        email: string;
        name: string;
        globalRole: "admin" | "staff" | "user";
        refreshToken: string;
        _id: unknown;
        $locals: Record<string, unknown>;
        $op: "save" | "validate" | "remove" | null;
        $where: Record<string, unknown>;
        baseModelName?: string;
        collection: import("mongoose").Collection;
        db: import("mongoose").Connection;
        errors?: import("mongoose").Error.ValidationError;
        id?: any;
        isNew: boolean;
        schema: import("mongoose").Schema;
        __v: number;
    } | null>;
    verifyUserRefreshToken(token: string, userId: string): Promise<{
        email: string;
        name: string;
        password: string;
        globalRole: "admin" | "staff" | "user";
        _id: unknown;
        $locals: Record<string, unknown>;
        $op: "save" | "validate" | "remove" | null;
        $where: Record<string, unknown>;
        baseModelName?: string;
        collection: import("mongoose").Collection;
        db: import("mongoose").Connection;
        errors?: import("mongoose").Error.ValidationError;
        id?: any;
        isNew: boolean;
        schema: import("mongoose").Schema;
        __v: number;
    }>;
    registerAdmin(adminDto: CreateAdminDto): Promise<UserResponse>;
    registerUser(userDto: CreateUserDto): Promise<UserResponse>;
    login(user: UserResponse, response: Response): Promise<UserResponse>;
    getCurrentUser(user: UserResponse, orgId: string): Promise<any>;
    refreshToken(user: UserResponse, response: Response): Promise<UserResponse>;
    logout(user: UserResponse, response: Response): Promise<void>;
}
